name: Deploy to Kubernetes with ArgoCD and Flux

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Create the ECR repository if it doesn't exist
    - name: Create ECR repository
      run: |
        aws ecr describe-repositories --repository-names my-repo --region ${{ secrets.AWS_REGION }} || \
        aws ecr create-repository --repository-name my-repo --region ${{ secrets.AWS_REGION }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # Step 4: Authenticate with Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Step 5: Build the Docker image
    - name: Build Docker image
      run: docker build -t my-app .

    # Step 6: Tag and push the Docker image to Amazon ECR
    - name: Push Docker image to ECR
      run: |
        docker tag my-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-repo:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-repo:latest

    # Step 7: Get the EKS cluster name dynamically
    - name: Get EKS cluster name
      id: eks-cluster
      run: |
        # List all EKS clusters and select the first one if there are multiple
        CLUSTER_NAME=$(aws eks list-clusters --query "clusters[0]" --output text)
        echo "EKS_CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

    # Step 8: Set up kubectl for Kubernetes deployment using the dynamically fetched cluster name
    - name: Set up kubectl
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl config view  # Debug: Check the kubeconfig
        kubectl cluster-info # Debug: Check if kubectl can connect to the cluster

    # Step 9: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes/deployment.yaml --validate=false
        kubectl apply -f kubernetes/service.yaml --validate=false


        